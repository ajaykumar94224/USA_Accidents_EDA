# -*- coding: utf-8 -*-
"""us-accidents-analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kp2J9Dly4AeDW-t6NVYaeTMQ4LY5cF7j

# us-accidents-analysis

Use the "Run" button to execute the code.

# US Accidents Exploratory Data Analysis
 
1. Talk about the EDA
2. Talk about dataset(source, what it contains, how it will be useful)

## In this EDA, following questions are answered:

- Are there more accidents in warmer or colder areas?
- Which 5 states have the highest number of accidents?
- Does New York shows up in the data? If yes, Why does the count is so low as this is the most populated city in USA?
- Among the top cities with most accidents, which states do they belong to?
- What time of the day most accidents happened? 
- Which days of the week have most accidents?
- Which Months have the most accidents?
- What is the trend of accidents year over year(decreasing or increasing)?
- When is accidents per unit of traffic is highest?

## About the Dataset

- Kaggle(Source)
- Information about the accidents
- Can be useful to prevent accidents
- Does not contain New York state and new york city data
"""

pip install opendatasets --upgrade --quiet

"""## Download the Data"""

import opendatasets as od
dataset_url = 'https://www.kaggle.com/datasets/sobhanmoosavi/us-accidents'
od.download(dataset_url)

data_filename = '/content/us-accidents/US_Accidents_Dec21.csv'

"""## Data Preparation and Cleaning

- Load the file using Pandas
- Look at some information about the data & the columns
- Fix any missing or incorrect data
"""

import pandas as pd

df = pd.read_csv(data_filename)

df

df.columns

df.info()

df.describe()

# To find numeric datatype columns in this dataset

numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']

numeric_df = df.select_dtypes(include=numerics)
len(numeric_df.columns)

# checking missing values
# df.isna().sum() is calculating number of values that have null values

df.isna()
df.isna().sum()
missing_percentage = (df.isna().sum().sort_values(ascending=False) / len(df))*100
missing_percentage

type(missing_percentage)

# In order to make graph of these values, remove columns with zero missing values so that graph is readable
missing_percentage[missing_percentage != 0]

# Time to make a graph

missing_percentage[missing_percentage != 0].plot(kind='barh')

"""As per graph above 'Number' column has missing values of more than 50%, so this column can be removed. Other columns has less than 20% missing values and for our analysis no need to clean these columns."""

# Droping 'Number' column
df.drop('Number', axis=1, inplace=True)

df.shape

"""## Exploratory Analysis and Visualization

1. City
2. Start time
3. Start Lat, Start Long
4. Temperature
5. Weather Conditions

### 1. City
"""

# Number of unique cities where accidents happened

cities = df.City.unique()
len(cities)

# Number of accidents in each city of USA

cities_by_accident = df.City.value_counts()
cities_by_accident

# Top 20 cities with the most number of accidents

cities_by_accident[:20].plot(kind = 'bar')

"""- Even New York city is one of the most populated city but still it's not showing anywhere in the above bar chart, which is strange. 
- Let's check if it's present in dataset.
"""

'New York' in df.City

'NY' in df.State

import seaborn as sns
sns.set_style("darkgrid")

sns.histplot(cities_by_accident, log_scale=True)

len(cities_by_accident[cities_by_accident == 1])

"""More than 1000 cities had only 1 accident."""

low_accident_cities = cities_by_accident[cities_by_accident<1000]

len(low_accident_cities)

len(low_accident_cities) / len(cities)*100

About 95.75% of all cities had less than 1000 accidents

sns.histplot(low_accident_cities,log_scale=True)

"""As shown above in graph and length function, around 150 cities had around 1000 accidents.(X-axis shows number of accidens and Y-axis shows count of cities)"""

high_accident_cities = cities_by_accident[cities_by_accident >= 1000]

len(high_accident_cities)

len(high_accident_cities) / len(cities)*100

"""Only 4.25% of all unique cities had more than 1000 accidents.  """

sns.histplot(high_accident_cities, log_scale=True)

"""As per graph above, 1000 cities had around 100 accidents and just one or two had close to 100,000 accidents, which is correct as we saw top 20 cities with the most accidents before."""

States = df.State.unique()

len(States)

#states having highest numbers of Accidents
high_s=list(high_accident_cities.keys())
state_list=[]
for i in range(len(high_s)):
    state_list.append(df.State[i])
state_list=list(state_list)
state_unique_list=list(set(state_list))

state_unique_list_counts=[]

for s in state_unique_list:
    state_unique_list_counts.append(state_list.count(s))
state_unique_list_counts

import matplotlib.pyplot as plt

myexplode=[0, 0, 0, 0,0.2,0]
plt.figure(figsize=(7,7))
plt.pie(state_unique_list_counts,labels=state_unique_list,autopct='%0.01f%%',explode = myexplode)
plt.show()

"""Ohio reported more than 60% of the accidents

### 2. Start Time
"""

df.Start_Time

df.Start_Time[0]

# changed string datatype of Start_time column to Timestamp in following line of code
df.Start_Time = pd.to_datetime(df.Start_Time)

df.Start_Time[0]

# used dt.hour to extract hour from Timestamp
df.Start_Time.dt.hour

df['Start_Time'].dt.hour.value_counts().sort_values(ascending=False)

sns.distplot(df.Start_Time.dt.hour, bins=24, kde=False, norm_hist=True)

"""- A high percentage of accidents occur between 1 pm and 6 pm
- second highest percentage of accidents happened between 6 am and 9 am(maybe people are in hurry to reach at work)
"""

sns.distplot(df.Start_Time.dt.dayofweek, bins=7, kde=False, norm_hist=True)

"""As shown below, accidents happened more all around day except highest between 12 pm and 7 pm, whereas on weekdays 1pm and 6pm being the only highest interval. """

sundays_start_time = df.Start_Time[df.Start_Time.dt.dayofweek == 6]
sns.distplot(sundays_start_time.dt.hour, bins=24, kde=False, norm_hist=True)

mondays_start_time = df.Start_Time[df.Start_Time.dt.dayofweek == 0]
sns.distplot(mondays_start_time.dt.hour, bins=24, kde=False, norm_hist=True)

sns.distplot(df.Start_Time.dt.month, bins=12, kde=False, norm_hist=True)

"""Can you explain the month-wise trend of accidents?

- Much data is missing for 2016, specially in first half of year.
"""

df_2016 = df[df.Start_Time.dt.year == 2016]
sns.distplot(df_2016.Start_Time.dt.month, bins = 12, kde = False, norm_hist = True)

df_2017 = df[df.Start_Time.dt.year == 2017]
sns.distplot(df_2017.Start_Time.dt.month, bins = 12, kde = False, norm_hist = True)

df_2019 = df[df.Start_Time.dt.year == 2019]
sns.distplot(df_2019.Start_Time.dt.month, bins = 12, kde = False, norm_hist = True)

df_2018 = df[df.Start_Time.dt.year == 2018]
sns.distplot(df_2018.Start_Time.dt.month, bins = 12, kde = False, norm_hist = True)

sns.histplot(df.Start_Time.dt.year, bins = 5)

"""There is significant increase in accidents in 2020-2021 year, it can be due to more data from this year as compared to data collected for previous years.

### 3. Start Lat and Long
"""

#info about column
df.Start_Lat

#info about column
df.Start_Lng

"""Scatter Plot of all the accidents hapened based on starting Lat and Long"""

sns.scatterplot(x=df.Start_Lng, y=df.Start_Lat, size= 0.0001)

"""Need folium to plot heatmap on Map"""

!pip install folium --quiet

import folium
from folium.plugins import HeatMap

"""Creating a list of lat and long using Zip function"""

# Create list of lattitude and longitude.
list(zip(list(df.Start_Lat), list(df.Start_Lng)))[:10]

"""Creating a heatmap using a sample dataset of 10% of the total 2.8 million records"""

sample_df = df.sample(int(0.01*len(df)))
lat_long = list(zip(list(sample_df.Start_Lat), list(sample_df.Start_Lng)))

map = folium.Map()
HeatMap(lat_long).add_to(map)
map

"""### 4. Temperature"""

top_with_temp=df['Temperature(F)'].value_counts().sort_values(ascending=False)
# top_with_temp[:3]
top_with_temp_counts=list(top_with_temp)
top_with_temp=list(top_with_temp.keys())
plt.figure(figsize=(20,10))
plt.bar(top_with_temp,top_with_temp_counts,color ='Red')
plt.show()

"""From above graph we can say that snowfall or winters had no major affect over the accidents as more than 70% of accidents seems to be happend when temperature was in between 40 to 70 Fahrenheit.

### 5. Weather Conditions
"""

plt.figure(figsize=(8,15))
df.Weather_Condition.value_counts()[:10].plot(kind='pie',autopct='%0.01f%%')

#states where weather conditions were fair and still aciidents happened
df['State'][df['Weather_Condition']=='Fair'].value_counts().sum()

fair_weather_df=df[df['Weather_Condition']=='Fair']
state_fair_weather_df=fair_weather_df['Start_Time'].dt.hour
plt.figure(figsize=(15,10))
state_fair_weather_df.plot(kind='hist', color='brown',bins=24)

"""Most of the accidents which had weather condition as Fair happend between 1-5PM

lets just check accidents which did not happen betwwn 1 to 5pm ...what weather condition they had
"""

weather_before_1PM_df=df[df['Start_Time'].dt.hour<12]
weather_before_1PM_df['Weather_Condition'].value_counts()
plt.pie(weather_before_1PM_df['Weather_Condition'].value_counts()[:8],labels=list(weather_before_1PM_df['Weather_Condition'].value_counts().keys())[:8],autopct='%0.01f%%')
plt.show()

weather_after_5PM_df=df[df['Start_Time'].dt.hour>17]
weather_after_5PM_df['Weather_Condition'].value_counts()
plt.pie(weather_after_5PM_df['Weather_Condition'].value_counts()[:8],labels=list(weather_after_5PM_df['Weather_Condition'].value_counts().keys())[:8],autopct='%0.01f%%')
plt.show()

"""From above analysis we can say there is no co-relation between Timing and weather ConditionsÂ¶

## Summary and Conclusion

Insights:

- Cities like Miami(106966), Los Angeles(68956) and Orlando(54691) has reported most number of accidents.
- From 11682 cities 496 cities reported more than 1000 accident cases which is 4.24% of total cities.
- 1110 Number of cities reported only 1 accident which should be clarified.
- OHIO State reported the most number of accidents which is 64% of total accidents.
- Having in mind that new york has the most number of population, we got to know this dataset does not consists any data from New York.
- High percent of accidents occured in between 1PM to 5PM.
- Most of the accidents took place on workdays, on the other hand weekend have comparatively less amount of accidents.
- December month reported most numbers of accidents in last three consecutive year(2019,2020,2021).
- Winter is not a factor of incresed accidents in December.
- More than 75% of accidents seems to be happend when temperature was in between 40 to 70 Fahrenheit.
- 1107194 is the number of accidents happened in fair weather conditions.
- There is no co-relation between Timing and Weather Conditions.
"""