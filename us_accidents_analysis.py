# -*- coding: utf-8 -*-
"""us-accidents-analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kp2J9Dly4AeDW-t6NVYaeTMQ4LY5cF7j

# us-accidents-analysis

Use the "Run" button to execute the code.

# US Accidents Exploratory Data Analysis

ToDo 
- Talk about the EDA
- Talk about dataset(source, what it contains, how it will be useful)
        - Kaggle
        - Information about the accidents
        - Can be useful to prevent accidents
        - Does not contain New York state and new york city data
"""

pip install opendatasets --upgrade --quiet

"""## Download the Data"""

import opendatasets as od
dataset_url = 'https://www.kaggle.com/datasets/sobhanmoosavi/us-accidents'
od.download(dataset_url)

data_filename = '/content/us-accidents/US_Accidents_Dec21.csv'

"""## Data Preparation and Cleaning

- Load the file using Pandas
- Look at some information about the data & the columns
- Fix any missing or incorrect data
"""

import pandas as pd

df = pd.read_csv(data_filename)

df

df.info()

df.describe()

numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']

numeric_df = df.select_dtypes(include=numerics)
len(numeric_df.columns)

# checking missing values

df.isna()
df.isna().sum()
missing_percentage = (df.isna().sum().sort_values(ascending=False) / len(df))*100
missing_percentage

type(missing_percentage)

# In order to make graph of these values, remove columns with zero missing values so that graph is readable
missing_percentage[missing_percentage != 0]

# Time to make a graph

missing_percentage[missing_percentage != 0].plot(kind='barh')

"""Remove columns that are not going to be used"""



"""## Exploratory Analysis and Visualization

1. City
2. Start time
3. Start Lat, Start Long
4. Temperature
5. Weather Conditions

### City
"""

cities = df.City.unique()
len(cities)

cities_by_accident = df.City.value_counts()
cities_by_accident

cities_by_accident[:20]

'New York' in df.City

'NY' in df.State

cities_by_accident[:20].plot(kind='barh')

import seaborn as sns
sns.set_style("darkgrid")

sns.histplot(cities_by_accident, log_scale=True)

len(cities_by_accident[cities_by_accident == 1])

high_accident_cities = cities_by_accident[cities_by_accident >= 1000]
low_accident_cities = cities_by_accident[cities_by_accident<1000]

len(high_accident_cities)

len(high_accident_cities) / len(cities)*100

"""### Start Time"""

df.Start_Time[0]

# changed string datatype of Start_time column to Timestamp in following line of code
df.Start_Time = pd.to_datetime(df.Start_Time)

df.Start_Time[0]

# used dt.hour to extract hour from Timestamp
df.Start_Time.dt.hour

sns.distplot(df.Start_Time.dt.hour, bins=24, kde=False, norm_hist=True)

"""- A high percentage of accidents occur between 1 pm and 6 pm(need to find reason behind this)
- second highest percentage of accidents happened between 6 am and 9 am(maybe people are in hurry to reach at work)
"""

sns.distplot(df.Start_Time.dt.dayofweek, bins=7, kde=False, norm_hist=True)

"""Is the distribution of accidents by hour same on weekend as weekdays?

As shown below, accidents happened more all around day except highest between 12 pm and 7 pm, whereas on weekdays 1pm and 6pm being the only highest interval. 
"""

sundays_start_time = df.Start_Time[df.Start_Time.dt.dayofweek == 6]
sns.distplot(sundays_start_time.dt.hour, bins=24, kde=False, norm_hist=True)

mondays_start_time = df.Start_Time[df.Start_Time.dt.dayofweek == 0]
sns.distplot(mondays_start_time.dt.hour, bins=24, kde=False, norm_hist=True)

sns.distplot(df.Start_Time.dt.month, bins=12, kde=False, norm_hist=True)

"""Can you explain the month-wise trend of accidents?

- Much data is missing for 2016, specially in first half of year.
"""

df_2016 = df[df.Start_Time.dt.year == 2016]
sns.distplot(df_2016.Start_Time.dt.month, bins = 12, kde = False, norm_hist = True)

df_2017 = df[df.Start_Time.dt.year == 2017]
sns.distplot(df_2017.Start_Time.dt.month, bins = 12, kde = False, norm_hist = True)

df_2019 = df[df.Start_Time.dt.year == 2019]
sns.distplot(df_2019.Start_Time.dt.month, bins = 12, kde = False, norm_hist = True)

df_2018 = df[df.Start_Time.dt.year == 2018]
sns.distplot(df_2018.Start_Time.dt.month, bins = 12, kde = False, norm_hist = True)

sns.histplot(df.Start_Time.dt.year, bins = 5)

"""There is significant increase in accidents in 2020-2021 year, it can be due to more data from this year as compared to data collected for previous years.

### Start Lat and Long
"""

#info about column
df.Start_Lat

#info about column
df.Start_Lng

"""Scatter Plot of all the accidents hapened based on starting Lat and Long"""

sns.scatterplot(x=df.Start_Lng, y=df.Start_Lat, size= 0.0001)

"""Need folium to plot heatmap on Map"""

!pip install folium --quiet

import folium
from folium.plugins import HeatMap

"""Creating a list of lat and long using Zip function"""

# Create list of lattitude and longitude.
list(zip(list(df.Start_Lat), list(df.Start_Lng)))[:10]

"""Creating a heatmap using a sample dataset of 10% of the total 2.8 million records"""

sample_df = df.sample(int(0.01*len(df)))
lat_long = list(zip(list(sample_df.Start_Lat), list(sample_df.Start_Lng)))

map = folium.Map()
HeatMap(lat_long).add_to(map)
map



"""## Ask and Answer Questions

1. Are there more accidents in warmer or colder areas?
2. Which 5 states have the highest number of accidents? Per capita accidents?
3. Does New York shows up in the data? If yes, Why does the count is so low as this is the most populated city in USA?
4. Among the top cities with most accidents, which states do they belong to?
5. What time of the day most accidents happened? ANSWERED
6. Which days of the week have most accidents?
7. Which Months have the most accidents?
8. What is the trend of accidents year over year(decreasing or increasing)?
9. When is accidents per unit of traffic is highest?  
"""





"""## Summary and Conclusion

Insights:
- No data from New York state and city
- Number of accidents per city decreases exponentially
- Less than 5% of total cities have more than 1000 accidents from 2016 to 2021 
- Over 1100 cities has just 1 accident in 5 years(need to investigate)
"""

pip install jovian --quiet

import jovian

jovian.commit()